
* jmatrix - j's matrix

jmatrix is a WIP [[https://github.com/gorhill/uMatrix][uMatrix]] library/implementation for qutebrowser. It operates on
uMatrix style config files, to make switching easier.

It tries to mirror uMatrix's behavior as close as possible. If you find a
discrepancy that's not accounted for, please let me know.

Here's a [[https://www.youtube.com/watch?v=UPxq8zkHXrg][small demo]].

* Usage

If you are using jmatrix as an API, please see [[file:jmatrix/integrations/qutebrowser.py::def%20_jmatrix_intercept_request(info:%20interceptor.Request)%20->%20None:][the qutebrowser integration]] for
an example on how to use everything.

jmatrix reads from (or creates) a file at ~<config-dir>/jmatrix-rules~, which is
~$HOME/.config/qutebrowser/jmatrix-rules~ on Linux. It accepts most of the [[https://github.com/gorhill/uMatrix/wiki/Rules-syntax][uMatrix
rules syntax]].

After installing into qutebrowser, you will get a ~:jmatrix-read-config~ command
to re-load the config on disk.

* Caveats

Right now, all we do is block incoming requests. uMatrix does a bit more than
this, such [[https://github.com/gorhill/uMatrix/issues/319][as spoofing noscript tags when js is blocked]]. It also means we cannot
block cookies (so those rules will be ignored).

* Performance

Right now, latency added seems to be around 0.015 ms. It's possible this can be improved.

#+begin_example
------------------------------------------------------------------------------------------- benchmark: 3 tests -------------------------------------------------------------------------------------------
Name (time in us)                         Min                Max               Mean            StdDev             Median               IQR            Outliers  OPS (Kops/s)            Rounds  Iterations
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
test_benchmark_complex_block           9.8600 (1.0)      24.3000 (1.06)     10.2850 (1.0)      0.3086 (1.03)     10.2600 (1.0)      0.1200 (1.0)       468;940       97.2293 (1.0)       40833           1
test_benchmark_complex_null_match     12.0400 (1.22)     22.8500 (1.0)      12.4916 (1.21)     0.2989 (1.0)      12.4700 (1.22)     0.1400 (1.17)    1067;1514       80.0538 (0.82)      51283           1
test_benchmark_null_match             15.6100 (1.58)     25.7800 (1.13)     16.2038 (1.58)     0.4022 (1.35)     16.1800 (1.58)     0.2300 (1.92)      422;220       61.7138 (0.63)      17203           1
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#+end_example

* Correctness

I lifted the matching algorithm almost entirely from uMatrix (since it has a very
weird hierarchy that was not easy to replicate without it). The logic for
determining first-party hosts is currently a little questionable, uMatrix uses
the [[https://github.com/gorhill/publicsuffixlist.js][public suffix list]], but I'm just assuming the tld is one block long.

If you find an issue, please report it!

Right now, we support these rules:

- ~rule:~
- ~matrix-off:~
- ~https-strict:~

* Installation
** qutebrowser
Right now, this extension is loaded through the config system, using
unstable api's. That means this is prone to break at any time, and you may
get qutebrowser crashes.

If you are installing into qutebrowser, you already have all the needed
dependencies. The tricky bit is getting the correct version of qutebrowser to
use this. We depend heavily on knowing what resource type a request is, which
isn't implemented on master yet. If you'd like to try this out, please apply the
patch in [[https://github.com/qutebrowser/qutebrowser/pull/4525][this pull request]] to get that feature on qtwebengine.

Once you are completely set up with that, place this repo in your config dir,
and add this to your ~config.py~.

#+begin_src python
  import sys, os
  sys.path.append(os.path.join(sys.path[0], 'jmatrix'))
  config.source("jmatrix/jmatrix/integrations/qutebrowser.py")
#+end_src

If you run ~:config-source~ it will cause double-initialization, which will
double your latency and make it impossible to reload the jmatrix config. Please
don't do that!

** Dependencies
- ~python3~ or ~pypy3~
** Tests
- ~pytest-benchmark~

If you pass pep8, you fail the style tests.

There are make targets for common operations.

* Design

The matrix is stored as a:

#+begin_example
Dict[str, Dict[str, Dict[Type, Action]]]
#+end_example

Because of this, we make a ludicrous amount of calls to dict get. This is
amplified quite a bit due to the poor design of the matcher currently (creating
a lot of unneeded hashtable lookups).

[[file:jmatrix/rule.py::class%20Action(enum.Enum):][Take a look at rule.py]] if you would like more information about the high level
design.

* Support

Let me know in ~#qutebrowser~ on freenode if you see any issues, or send me a mail.

* License
jmatrix is licensed under the GPLv3+.
